import hashlib
import os
import logging

# List of known malware signatures (hashes)
MALWARE_SIGNATURES = {
    "eicar_test": "44d88612fea8a8f36de82e1278abb02f",
    "malware_sample_1": "098f6bcd4621d373cade4e832627b4f6",
    "malware_sample_2": "ad0234829205b9033196ba818f7a872b",
    # Add more known malware hashes here
}

def get_file_hash(file_path):
    """Compute the MD5 hash of a file."""
    hasher = hashlib.md5()
    try:
        with open(file_path, 'rb') as file:
            buffer = file.read()
            hasher.update(buffer)
        return hasher.hexdigest()
    except Exception as e:
        logging.error(f"Error reading file {file_path}: {e}")
        return None

def scan_directory(directory):
    """Scan a directory for malware."""
    infected_files = []
    for root, _, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            file_hash = get_file_hash(file_path)
            if file_hash in MALWARE_SIGNATURES.values():
                infected_files.append(file_path)
                logging.warning(f"Malware found: {file_path}")
    return infected_files

def remove_infected_files(infected_files):
    """Remove infected files."""
    for file_path in infected_files:
        try:
            os.remove(file_path)
            logging.info(f"Removed infected file: {file_path}")
        except Exception as e:
            logging.error(f"Error removing file {file_path}: {e}")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    directory_to_scan = input("Enter the directory to scan for malware: ")
    infected_files = scan_directory(directory_to_scan)
    if infected_files:
        confirm = input(f"Do you want to remove {len(infected_files)} infected files? (yes/no): ")
        if confirm.lower() == "yes":
            remove_infected_files(infected_files)
        else:
            logging.info("No files were removed.")
    else:
        logging.info("No malware found.")
